<?php  # Check to see if the user requested load to be generated (GET genload=1) or  # if the genload session variable has not been set  if (isset($_REQUEST['genload']) && $_REQUEST['genload'] == 1) {    # Requesting load generation    # Get ELB URL and validate that it is a valid URL    $ELB = "http://" . $_REQUEST['elb'] . "/";    if (!preg_match('|^http://[a-z0-9-]+(.[a-z0-9-]+)*(:[0-9]+)?(/.*)?$|i', $ELB)) {      echo $ELB . " is not a valid URL!";      exit;    }    # Validate that wave requests & connections are valid numbers    $n1 = "-n " . intval($_REQUEST['n1']) . " ";    $c1 = "-c " . intval($_REQUEST['c1']) . " ";    $n2 = "-n " . intval($_REQUEST['n2']) . " ";    $c2 = "-c " . intval($_REQUEST['c2']) . " ";    $n3 = "-n " . intval($_REQUEST['n3']) . " ";    $c3 = "-c " . intval($_REQUEST['c3']) . " ";        # Zero     $w1 = "echo '' > /tmp/genload.txt; ";    $w1 = $w1 . "ab -w " . $n1 . $c1 . $ELB . " >> /tmp/genload.txt 2>&1; ";    $w2 = "ab -w " . $n2 . $c2 . $ELB . " >> /tmp/genload.txt 2>&1; ";    $w3 = "ab -w " . $n3 . $c3 . $ELB . " >> /tmp/genload.txt 2>&1; ";    $w3 = $w3 . "echo '\nBenchmark Complete!!' >> /tmp/genload.txt; ";    # This will generate apache bench load in 3 waves based on the values provided in the form    echo exec('('  . $w1 . $w2 . $w3 . ') &>> /tmp/genload.txt &');    echo "Starting benchmark tests! (auto refresh in 2 seconds)<br/>";    echo "<meta http-equiv=\"refresh\" content=\"2,URL=/genload.php?genload=2#end\" />";    exit;   }  if (isset($_REQUEST['genload']) && $_REQUEST['genload'] == 2) {    # Code here for displaying results of /tmp/genload.txt    echo "<b>Displaying results from Apache Bench (auto refresh every 5 seconds)</b><p>\n";    echo "<meta http-equiv=\"refresh\" content=\"5,URL=/genload.php?genload=2#end\" />\n";    passthru('cat /tmp/genload.txt');    echo "<a name=\"end\">\n";    echo "&nbsp; ";   exit;  }  ?><form action="genload.php" type="POST"><input type="hidden" name="genload" value="1"><table border="1" cellspacing="0" cellpadding="0"><tr><td><table><tr><th colspan="2">Apache Bench Load Test</th></tr><tr><td>ELB Name:</td><td><input type="text" name="elb" value="" size="60"></td></tr><tr><td>Wave 1 Concurrent Connections:</td><td><input type="text" name="c1" value="6" size="8"></td></tr><tr><td>Wave 1 Requests:</td><td><input type="text" name="n1" value="5000" size="8"></td></tr><tr><td>Wave 2 Concurrent Connections:</td><td><input type="text" name="c2" value="10" size="8"></td></tr><tr><td>Wave 2 Requests:</td><td><input type="text" name="n2" value="10000" size="8"></td></tr><tr><td>Wave 3 Concurrent Connections:</td><td><input type="text" name="c3" value="16" size="8"></td></tr><tr><td>Wave 3 Requests:</td><td><input type="text" name="n3" value="15000" size="8"></td></tr><tr><td colspan="2"><center><input type="submit" value="Generate Load"></center></tr></table></td></tr></table></form><table border="1" width="600px"><tr><td>This form will allow you to generate a series, or "wave", of Apache Bench workloads against an ELBfor Auto Scaling testing purposes.  Each "wave" will ideally generate successively increasing workloads.The default example provides an inital load of 6 concurrent connections for 5000 requests, followed by 10 connections for 10,000 requests, finishing up with 16 connections for 15,000 requests.</td></tr></table>